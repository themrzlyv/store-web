name: Deploy Store App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Test DEPLOY_KEY secret
        run: |
          # Check if the secret exists and is not empty
          if [ -z "${{ secrets.DEPLOY_KEY }}" ]; then
            echo "DEPLOY_KEY is empty or not configured properly!"
            exit 1
          else
            echo "DEPLOY_KEY is present. It has $(echo "${{ secrets.DEPLOY_KEY }}" | wc -c) characters."
          fi

      - name: Debug SSH Agent
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.DEPLOY_KEY }}" | ssh-add -
          ssh-add -l

      # Step 3: Deploy to VPS
      - name: Deploy to VPS
        env:
          HOST: 157.173.205.31
          USERNAME: root
        run: |
          # Debugging: check if SSH key is loaded
          echo "Loading SSH key"
          echo "${{ secrets.DEPLOY_KEY }}" | ssh-add -

          # SSH into VPS and perform the deployment
          ssh -A -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e
            echo "Logged into VPS at $HOST"

            cd /var/www/store-web
            ssh -T git@github.com || echo "Failed to connect to GitHub via SSH"
            echo "Pulling latest code from GitHub"
            git pull origin main

            # Stop and remove the existing Docker container
            if [ \$(docker ps -q -f name=store-web) ]; then
              echo "Stopping and removing existing container"
              docker stop store-web
              docker rm store-web
            fi

            # Build a new Docker image locally on the VPS
            echo "Building the Docker image locally"
            docker build -t store-web:latest .

            # Run the updated Docker container
            echo "Starting the updated container"
            docker run -d --name store-web --network app_network -p 3000:3000 \
              -e NEXT_PUBLIC_NODE_ENV=production \
              -e NEXT_PUBLIC_SERVER_URL=https://api.themirzaliyev.store \
              store-web:latest

            echo "Deployment complete!"
          EOF
